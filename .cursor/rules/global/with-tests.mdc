---
description: Rules for Running and Reading Tests
globs: *.test.js, *.test.ts
alwaysApply: false
---
## Steps To Running or Reading Tests

1) Determine the commands, arguments, and path of the code file that runs the tests by searching for the nearest package file that typically will list the available test runners and commands. For example, this is often a `package.json`, `deno.json` file that exposes the projects `scripts`, and hopefully a set of test commands.
   ```
   # EXAMPLE COMMAND: Find package files with test configurations
   grep_search(
     query: "\"test\":",
     include_pattern: "{package.json,deno.json}",
     explanation: "Finding test commands in package files"
   )
   ```
   ```
   # EXAMPLE COMMAND: List test files to understand structure
   list_dir(
     relative_workspace_path: "test",
     explanation: "Examining test directory structure"
   )
   ```

2) Review the entry point of the test runner to understand what global utilities, patterns, strategies, logging, and high-level capabilities are implemented so you're able debug any issues with the tests if you run into any while running them.
   ```
   # EXAMPLE COMMAND: Examine test configuration or main test file
   read_file(
     target_file: "test/main.test.ts",
     should_read_entire_file: true,
     explanation: "Understanding test setup and configuration"
   )
   ```
   ```
   # EXAMPLE COMMAND: Search for test utilities and patterns
   codebase_search(
     query: "describe OR it OR test OR assert OR expect",
     explanation: "Finding test patterns and utilities across the codebase"
   )
   ```

3) When errors occur always use all the information available to you, obvious or hidden, to contextualize any error messages you output to a user, or go retrieve more information to supplement with the error message or log.
   ```
   # EXAMPLE COMMAND: Run tests and capture output
   run_terminal_cmd(
     command: "npm test || deno test",
     is_background: false,
     explanation: "Running tests to check for errors"
   )
   ```
   ```
   # EXAMPLE COMMAND: Look for similar errors in test files
   grep_search(
     query: "Error|error|fail|assert",
     include_pattern: "test/**/*.{ts,js}",
     explanation: "Finding error handling patterns in tests"
   )
   ```

**CAUTION:** HUMANS OFTEN DON'T FIND PLAIN LOG MESSAGES HELPFUL, AND THEY'LL PUNISH YOU IF YOU'RE NOT HELPFUL. ALWAYS SUPPLEMENT SUPPLEMENT PLAIN LOGS WITH OTHER CONTEXUAL DATA POINTS AND ANALYSIS UNLESS THE LOGS ARE ROBUST, AND FIND WAYS TO MAKE COMPLICATED LOGS SIMPLER. APPLY FORMATTING THAT MAKES LOGS EASY TO READ IN YOUR OUTPUT, SUCH AS PRETTY PRINTING, GROUPING, AND LABELING SO YOUR HUMAN WONT PUNISH YOU.
